import aiohttp
import asyncio
import logging
import sys
import time
from datetime import datetime, timedelta
from logging.handlers import RotatingFileHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
handler = RotatingFileHandler('bot.log', maxBytes=5*1024*1024, backupCount=3)  # 5 –ú–ë, 3 —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö —Ñ–∞–π–ª–∞
handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
logging.getLogger().addHandler(handler)
logging.getLogger().setLevel(logging.INFO)

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = '7977899864:AAEoviMG0NgG2Al0kUefPY4fUcmJYgUwVxY'
CHAT_ID = -1002471944428  # ID –∫–∞–Ω–∞–ª–∞ —Å –º–∏–Ω—É—Å–æ–º
CHANGE_THRESHOLD = 30  # % –∏–∑–º–µ–Ω–µ–Ω–∏—è
CHECK_INTERVAL = 60  # —Å–µ–∫—É–Ω–¥
WINDOW_MINUTES = 90  # –ø–µ—Ä–∏–æ–¥ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö
RETRY_DELAY = 5  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ API (—Å–µ–∫)

# –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω (–≤ –ø–∞–º—è—Ç–∏)
price_history = {}

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async def send_telegram_message(session: aiohttp.ClientSession, text: str):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {"chat_id": CHAT_ID, "text": text, "parse_mode": "Markdown"}
    try:
        async with session.post(url, json=payload, timeout=10, ssl=False) as response:
            if response.status != 200:
                error_text = await response.text()
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {error_text}")
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {error_text}")
            else:
                logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {str(e)}")
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {str(e)}")

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–æ—Ç–æ–≤–æ–π —Ü–µ–Ω—ã
async def get_spot_price(session: aiohttp.ClientSession, symbol: str):
    try:
        url = f"https://api.mexc.com/api/v3/ticker/price?symbol={symbol.replace('_USDT', 'USDT')}"
        async with session.get(url, timeout=10) as response:
            data = await response.json()
            return float(data.get("price", 0))
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–æ—Ç–æ–≤–æ–π —Ü–µ–Ω—ã –¥–ª—è {symbol}: {str(e)}")
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–æ—Ç–æ–≤–æ–π —Ü–µ–Ω—ã –¥–ª—è {symbol}: {str(e)}")
        return 0

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
def build_message(ticker, change, max_price, min_price, now_price, fair_price, spot_price, volume_24h, minutes_passed, max_size):
    emoji = "üü¢" if change > 0 else "üî¥"
    timestamp = (datetime.utcnow() + timedelta(hours=3)).strftime('%H:%M:%S')

    return (
        f"{emoji} ${ticker.replace('_USDT', '')}\n"
        f"     Change: {change:+.2f}%\n\n"
        f"MAX: {max_price:.4f}\n"
        f"MIN: {min_price:.4f}\n\n"
        f"Max size: ${max_size:.2f}\n\n"
        f"Now last price: ${now_price:.4f}\n"
        f"Fair price: ${fair_price:.4f}\n\n"
        f"Spot price: ${spot_price:.6f}\n\n"
        f"‚è±Ô∏è {minutes_passed:.1f} min\n"
        f"üåä Volume 24h: ${volume_24h / 1e6:.2f}m\n\n"
        f"üïì {timestamp} UTC+3"
    )

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ price_history
def clean_price_history():
    now = int(time.time())
    for symbol in list(price_history.keys()):
        price_history[symbol] = [p for p in price_history[symbol] if now - p["time"] <= WINDOW_MINUTES * 60]
        if not price_history[symbol]:
            del price_history[symbol]

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
async def monitor_futures():
    logging.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ aiohttp")
    connector = aiohttp.TCPConnector(ssl=True)  # –í–∫–ª—é—á–∞–µ–º SSL
    async with aiohttp.ClientSession(connector=connector) as session:
        logging.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram")
        try:
            await send_telegram_message(session, "üîî –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞—á–∏–Ω–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω...")
            logging.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
            return
        
        while True:
            try:
                url = "https://contract.mexc.com/api/v1/contract/ticker"
                logging.info("–ó–∞–ø—Ä–æ—Å –∫ API MEXC")
                async with session.get(url, timeout=15) as response:
                    if response.status != 200:
                        error_text = await response.text()
                        logging.error(f"–û—à–∏–±–∫–∞ API MEXC: {error_text}")
                        print(f"–û—à–∏–±–∫–∞ API MEXC: {error_text}")
                        await asyncio.sleep(RETRY_DELAY)
                        continue
                    data = (await response.json())["data"]
                
                now = int(time.time())
                logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(data)} —Ç–æ–∫–µ–Ω–æ–≤ —Å API MEXC")

                for item in data:
                    symbol = item["symbol"]
                    last_price = float(item.get("lastPrice", 0))
                    volume_24h = float(item.get("volume24", 0))  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: volume24 –≤–º–µ—Å—Ç–æ volume24h
                    fair_price = float(item.get("fairPrice", item.get("indexPrice", last_price)))

                    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ API –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    logging.info(f"API response for {symbol}: {item}")

                    if symbol not in price_history:
                        price_history[symbol] = []
                    price_history[symbol].append({"time": now, "price": last_price, "volume": volume_24h})

                    if len(price_history[symbol]) >= 2:
                        old_price = price_history[symbol][0]["price"]
                        if old_price == 0:
                            continue
                        price_change = ((last_price - old_price) / old_price) * 100
                        logging.info(f"–¢–æ–∫–µ–Ω {symbol}: –ò–∑–º–µ–Ω–µ–Ω–∏–µ {price_change:.2f}% (–ø–æ—Ä–æ–≥ {CHANGE_THRESHOLD}%)")

                        if abs(price_change) >= CHANGE_THRESHOLD:
                            prices = [p["price"] for p in price_history[symbol]]
                            volumes = [p["volume"] for p in price_history[symbol]]
                            spot_price = await get_spot_price(session, symbol)
                            max_size = max(volumes) / len(volumes) * 0.01 if volumes else 0

                            msg = build_message(
                                symbol,
                                price_change,
                                max(prices),
                                min(prices),
                                last_price,
                                fair_price,
                                spot_price,
                                volume_24h,
                                (now - price_history[symbol][0]["time"]) / 60,
                                max_size
                            )
                            await send_telegram_message(session, msg)
                            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–∏–≥–Ω–∞–ª –¥–ª—è {symbol}: –ò–∑–º–µ–Ω–µ–Ω–∏–µ {price_change:.2f}%")
                            price_history[symbol] = [price_history[symbol][-1]]
                
                # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                clean_price_history()
                
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {str(e)}")
                print(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {str(e)}")
                await asyncio.sleep(RETRY_DELAY)
            
            await asyncio.sleep(CHECK_INTERVAL)

# –°—Ç–∞—Ä—Ç
if __name__ == "__main__":
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        logging.info("–°–æ–±—ã—Ç–∏–π–Ω—ã–π —Ü–∏–∫–ª —Å–æ–∑–¥–∞–Ω")
        loop.run_until_complete(monitor_futures())
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C)")
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C)")
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {str(e)}")
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {str(e)}")
    finally:
        logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞")
        print("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
        if 'loop' in locals() and not loop.is_closed():
            loop.run_until_complete(loop.shutdown_asyncgens())
            loop.close()
